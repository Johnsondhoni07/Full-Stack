{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    itemss: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    additemsToCart(state, action) {\n      const newitems = action.payload;\n      const existingitems = state.itemss.find(items => items.id === newitems.id);\n      state.totalQuantity++;\n\n      if (!existingitems) {\n        state.itemss.push({\n          id: newitems.id,\n          price: newitems.price,\n          quantity: 1,\n          totalPrice: newitems.price,\n          name: newitems.title\n        });\n      } else {\n        existingitems.quantity++;\n        existingitems.totalPrice = existingitems.totalPrice + newitems.price;\n      }\n    },\n\n    removeitemsFromCart(state, action) {\n      const id = action.payload;\n      const existingitems = state.itemss.find(items => items.id === id);\n      state.totalQuantity--;\n\n      if (existingitems.quantity === 1) {\n        state.itemss = state.itemss.filter(items => items.id !== id);\n      } else {\n        existingitems.quantity--;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice; // import { createSlice } from \"@reduxjs/toolkit\";\n// const cartSlice = createSlice({\n//   name: \"cart\",\n//   initialstate: {\n//     items: [],\n//     totalquantity: 0,\n//   },\n//   reducers: {\n//     additemsToCard(state, action) {\n//       const newitems = action.payload;\n//       const existing = state.items.find(items => items.id === newitems.id);\n//       state.totalquantity++;\n//       if (!existing) {\n//         state.items.push({\n//           id: newitems.id,\n//           price: newitems.price,\n//           quantity: 1,\n//           totalPrice: newitems.price,\n//           name: newitems.title,\n//         });\n//       } else {\n//         existing.quantity++;\n//         existing.totalprice = existing.totalPrice + newitems.price;\n//       }\n//     },\n//   removeitemsFromCart(state, action) {\n//     const id = action.payload;\n//     const existing = state.items.find(items => items.id === id);\n//     state.totalquantity--;\n//     if (existing.quantity === 1) {\n//       state.items = state.items.filter(items => items.id != id);\n//     } else {\n//       existing.quantity--;\n//     }\n//   },\n// }});\n// export const cartActions = cartSlice.actions;\n// export default cartSlice;","map":{"version":3,"sources":["/var/www/html/React/01-starting-project/src/Store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","itemss","totalQuantity","reducers","additemsToCart","state","action","newitems","payload","existingitems","find","items","id","push","price","quantity","totalPrice","title","removeitemsFromCart","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE,EADI;AAEZC,IAAAA,aAAa,EAAE;AAFH,GAFc;AAM5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC5B,YAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAxB;AACA,YAAMC,aAAa,GAAGJ,KAAK,CAACJ,MAAN,CAAaS,IAAb,CAAmBC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaL,QAAQ,CAACK,EAAnD,CAAtB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAI,CAACO,aAAL,EAAoB;AAClBJ,QAAAA,KAAK,CAACJ,MAAN,CAAaY,IAAb,CAAkB;AAChBD,UAAAA,EAAE,EAAEL,QAAQ,CAACK,EADG;AAEhBE,UAAAA,KAAK,EAAEP,QAAQ,CAACO,KAFA;AAGhBC,UAAAA,QAAQ,EAAE,CAHM;AAIhBC,UAAAA,UAAU,EAAET,QAAQ,CAACO,KAJL;AAKhBf,UAAAA,IAAI,EAAEQ,QAAQ,CAACU;AALC,SAAlB;AAOD,OARD,MAQO;AACLR,QAAAA,aAAa,CAACM,QAAd;AACAN,QAAAA,aAAa,CAACO,UAAd,GAA2BP,aAAa,CAACO,UAAd,GAA2BT,QAAQ,CAACO,KAA/D;AACD;AACF,KAjBO;;AAkBRI,IAAAA,mBAAmB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AACjC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,aAAa,GAAGJ,KAAK,CAACJ,MAAN,CAAaS,IAAb,CAAkBC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaA,EAAxC,CAAtB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAIO,aAAa,CAACM,QAAd,KAA2B,CAA/B,EAAkC;AAChCV,QAAAA,KAAK,CAACJ,MAAN,GAAeI,KAAK,CAACJ,MAAN,CAAakB,MAAb,CAAoBR,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaA,EAA1C,CAAf;AACD,OAFD,MAEO;AACLH,QAAAA,aAAa,CAACM,QAAd;AACD;AACF;;AA3BO;AANkB,CAAD,CAA7B;AAqCA,OAAO,MAAMK,WAAW,GAAGtB,SAAS,CAACuB,OAA9B;AAEP,eAAevB,SAAf,C,CACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    itemss: [],\n    totalQuantity: 0,\n  },\n  reducers: {\n    additemsToCart(state, action) {\n      const newitems = action.payload;\n      const existingitems = state.itemss.find((items) => items.id === newitems.id);\n      state.totalQuantity++;\n      if (!existingitems) {\n        state.itemss.push({\n          id: newitems.id,\n          price: newitems.price,\n          quantity: 1,\n          totalPrice: newitems.price,\n          name: newitems.title\n        });\n      } else {\n        existingitems.quantity++;\n        existingitems.totalPrice = existingitems.totalPrice + newitems.price;\n      }\n    },\n    removeitemsFromCart(state, action) {\n      const id = action.payload;\n      const existingitems = state.itemss.find(items => items.id === id);\n      state.totalQuantity--;\n      if (existingitems.quantity === 1) {\n        state.itemss = state.itemss.filter(items => items.id !== id);\n      } else {\n        existingitems.quantity--;\n      }\n    },\n  },\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n// import { createSlice } from \"@reduxjs/toolkit\";\n\n\n// const cartSlice = createSlice({\n//   name: \"cart\",\n//   initialstate: {\n//     items: [],\n//     totalquantity: 0,\n//   },\n//   reducers: {\n//     additemsToCard(state, action) {\n//       const newitems = action.payload;\n//       const existing = state.items.find(items => items.id === newitems.id);\n//       state.totalquantity++;\n//       if (!existing) {\n//         state.items.push({\n//           id: newitems.id,\n//           price: newitems.price,\n//           quantity: 1,\n//           totalPrice: newitems.price,\n//           name: newitems.title,\n//         });\n//       } else {\n//         existing.quantity++;\n//         existing.totalprice = existing.totalPrice + newitems.price;\n//       }\n//     },\n//   removeitemsFromCart(state, action) {\n//     const id = action.payload;\n//     const existing = state.items.find(items => items.id === id);\n//     state.totalquantity--;\n//     if (existing.quantity === 1) {\n//       state.items = state.items.filter(items => items.id != id);\n//     } else {\n//       existing.quantity--;\n//     }\n//   },\n// }});\n\n// export const cartActions = cartSlice.actions;\n\n// export default cartSlice;\n"]},"metadata":{},"sourceType":"module"}