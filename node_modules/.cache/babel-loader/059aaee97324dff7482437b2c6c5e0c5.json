{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n// const cartSlice = createSlice({\n//   name: 'cart',\n//   initialState: {\n//     items: [],\n//     totalQuantity: 0,\n//   },\n//   reducers: {\n//     addItemToCart(state, action) {\n//       const newItem = action.payload;\n//       const existingItem = state.items.find((item) => item.id === newItem.id);\n//       state.totalQuantity++;\n//       if (!existingItem) {\n//         state.items.push({\n//           id: newItem.id,\n//           price: newItem.price,\n//           quantity: 1,\n//           totalPrice: newItem.price,\n//           name: newItem.title\n//         });\n//       } else {\n//         existingItem.quantity++;\n//         existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n//       }\n//     },\n//     removeItemFromCart(state, action) {\n//       const id = action.payload;\n//       const existingItem = state.items.find(item => item.id === id);\n//       state.totalQuantity--;\n//       if (existingItem.quantity === 1) {\n//         state.items = state.items.filter(item => item.id !== id);\n//       } else {\n//         existingItem.quantity--;\n//       }\n//     },\n//   },\n// });\n// export const cartActions = cartSlice.actions;\n// export default cartSlice;\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initial = {\n  item: [null],\n  totalquantity: 0\n};\nconst val = inin;\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialstate: val,\n  reducers: {\n    addItemToCard(state, action) {\n      const newItem = action.payload;\n      const existing = state.item.find(item => item.id === newItem.id);\n      state.totalquantity++;\n\n      if (!existing) {\n        state.item.push({\n          id: newItem.id,\n          title: newItem.title,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existing.quantity++; // existing.totalprice = existing.totalPrice + newItem.price;\n      }\n    }\n\n  },\n\n  removeItemFromCart(state, action) {\n    const id = action.payload;\n    const existing = state.item.find(item => item.id === id);\n    state.totalquantity--;\n\n    if (existing.quantity === 1) {\n      state.item = state.item.filter(item => item.id != id);\n    } else {\n      existing.quantity--;\n    }\n  }\n\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/var/www/html/React/01-starting-project/src/Store/cart-slice.js"],"names":["createSlice","initial","item","totalquantity","val","inin","cartSlice","name","initialstate","reducers","addItemToCard","state","action","newItem","payload","existing","find","id","push","title","quantity","totalPrice","price","removeItemFromCart","filter","cartActions","actions"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA,SAASA,WAAT,QAA4B,kBAA5B;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,CAAC,IAAD,CADQ;AAEdC,EAAAA,aAAa,EAAE;AAFD,CAAhB;AAIA,MAAMC,GAAG,GAAGC,IAAZ;AACA,MAAMC,SAAS,GAAGN,WAAW,CAAC;AAC5BO,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAEJ,GAFc;AAG5BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,QAAQ,GAAGJ,KAAK,CAACT,IAAN,CAAWc,IAAX,CAAiBd,IAAD,IAAUA,IAAI,CAACe,EAAL,KAAYJ,OAAO,CAACI,EAA9C,CAAjB;AACAN,MAAAA,KAAK,CAACR,aAAN;;AACA,UAAI,CAACY,QAAL,EAAe;AACbJ,QAAAA,KAAK,CAACT,IAAN,CAAWgB,IAAX,CAAgB;AACdD,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADE;AAEdE,UAAAA,KAAK,EAAEN,OAAO,CAACM,KAFD;AAGdC,UAAAA,QAAQ,EAAE,CAHI;AAIdC,UAAAA,UAAU,EAAER,OAAO,CAACS,KAJN;AAKdf,UAAAA,IAAI,EAAEM,OAAO,CAACM;AALA,SAAhB;AAOD,OARD,MAQO;AACLJ,QAAAA,QAAQ,CAACK,QAAT,GADK,CAEL;AACD;AACF;;AAjBO,GAHkB;;AAsB5BG,EAAAA,kBAAkB,CAACZ,KAAD,EAAQC,MAAR,EAAgB;AAChC,UAAMK,EAAE,GAAGL,MAAM,CAACE,OAAlB;AACA,UAAMC,QAAQ,GAAGJ,KAAK,CAACT,IAAN,CAAWc,IAAX,CAAiBd,IAAD,IAAUA,IAAI,CAACe,EAAL,KAAYA,EAAtC,CAAjB;AACAN,IAAAA,KAAK,CAACR,aAAN;;AACA,QAAIY,QAAQ,CAACK,QAAT,KAAsB,CAA1B,EAA6B;AAC3BT,MAAAA,KAAK,CAACT,IAAN,GAAaS,KAAK,CAACT,IAAN,CAAWsB,MAAX,CAAmBtB,IAAD,IAAUA,IAAI,CAACe,EAAL,IAAWA,EAAvC,CAAb;AACD,KAFD,MAEO;AACLF,MAAAA,QAAQ,CAACK,QAAT;AACD;AACF;;AA/B2B,CAAD,CAA7B;AAkCA,OAAO,MAAMK,WAAW,GAAGnB,SAAS,CAACoB,OAA9B;AAEP,eAAepB,SAAf","sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\n\n// const cartSlice = createSlice({\n//   name: 'cart',\n//   initialState: {\n//     items: [],\n//     totalQuantity: 0,\n//   },\n//   reducers: {\n//     addItemToCart(state, action) {\n//       const newItem = action.payload;\n//       const existingItem = state.items.find((item) => item.id === newItem.id);\n//       state.totalQuantity++;\n//       if (!existingItem) {\n//         state.items.push({\n//           id: newItem.id,\n//           price: newItem.price,\n//           quantity: 1,\n//           totalPrice: newItem.price,\n//           name: newItem.title\n//         });\n//       } else {\n//         existingItem.quantity++;\n//         existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n//       }\n//     },\n//     removeItemFromCart(state, action) {\n//       const id = action.payload;\n//       const existingItem = state.items.find(item => item.id === id);\n//       state.totalQuantity--;\n//       if (existingItem.quantity === 1) {\n//         state.items = state.items.filter(item => item.id !== id);\n//       } else {\n//         existingItem.quantity--;\n//       }\n//     },\n//   },\n// });\n\n// export const cartActions = cartSlice.actions;\n\n// export default cartSlice;\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initial = {\n  item: [null],\n  totalquantity: 0,\n};\nconst val = inin\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialstate: val,\n  reducers: {\n    addItemToCard(state, action) {\n      const newItem = action.payload;\n      const existing = state.item.find((item) => item.id === newItem.id);\n      state.totalquantity++;\n      if (!existing) {\n        state.item.push({\n          id: newItem.id,\n          title: newItem.title,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title,\n        });\n      } else {\n        existing.quantity++;\n        // existing.totalprice = existing.totalPrice + newItem.price;\n      }\n    },\n  },\n  removeItemFromCart(state, action) {\n    const id = action.payload;\n    const existing = state.item.find((item) => item.id === id);\n    state.totalquantity--;\n    if (existing.quantity === 1) {\n      state.item = state.item.filter((item) => item.id != id);\n    } else {\n      existing.quantity--;\n    }\n  },\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}