{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    total: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      state.total = statuys + newItem.price; //   console.log(state.items);\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice; // import { createSlice } from \"@reduxjs/toolkit\";\n// const cartSlice = createSlice({\n//   name: \"cart\",\n//   initialstate: {\n//     item: [],\n//     totalquantity: 0,\n//   },\n//   reducers: {\n//     addItemToCard(state, action) {\n//       const newItem = action.payload;\n//       const existing = state.item.find((item) => item.id === newItem.id);\n//       state.totalquantity++;\n//       if (!existing) {\n//         state.item.push({\n//           id: newItem.id,\n//           price: newItem.price,\n//           quantity: 1,\n//           totalPrice: newItem.price,\n//           name: newItem.title,\n//         });\n//       } else {\n//         existing.quantity++;\n//         existing.totalprice = existing.totalPrice + newItem.price;\n//       }\n//     },\n//   removeItemFromCart(state, action) {\n//     const id = action.payload;\n//     const existing = state.item.find(item => item.id === id);\n//     state.totalquantity--;\n//     if (existing.quantity === 1) {\n//       state.item = state.item.filter(item => item.id !== id);\n//     } else {\n//       existing.quantity--;\n//     }\n//   },\n// }});\n// export const cartActions = cartSlice.actions;\n// export default cartSlice;","map":{"version":3,"sources":["/var/www/html/React/01-starting-project/src/Store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","total","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","statuys","price","push","quantity","totalPrice","title","removeItemFromCart","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE,CAFH;AAGZC,IAAAA,KAAK,EAAC;AAHM,GAFc;AAO5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAN,CAAYU,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;AACAP,MAAAA,KAAK,CAACJ,aAAN;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAYW,OAAO,GAAGN,OAAO,CAACO,KAA9B,CAJ2B,CAK7B;;AACE,UAAI,CAACL,YAAL,EAAmB;AACjBJ,QAAAA,KAAK,CAACL,KAAN,CAAYe,IAAZ,CAAiB;AACfH,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADG;AAEfE,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFA;AAGfE,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAEV,OAAO,CAACO,KAJL;AAKfhB,UAAAA,IAAI,EAAES,OAAO,CAACW;AALC,SAAjB;AAOD,OARD,MAQO;AACLT,QAAAA,YAAY,CAACO,QAAb;AACAP,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BV,OAAO,CAACO,KAA5D;AACD;AACF,KAnBO;;AAqBRK,IAAAA,kBAAkB,CAACd,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAN,CAAYU,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;AACAP,MAAAA,KAAK,CAACJ,aAAN;;AACA,UAAIQ,YAAY,CAACO,QAAb,KAA0B,CAA9B,EAAiC;AAC/BX,QAAAA,KAAK,CAACL,KAAN,GAAcK,KAAK,CAACL,KAAN,CAAYoB,MAAZ,CAAmBT,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd;AACD,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACO,QAAb;AACD;AACF;;AA9BO;AAPkB,CAAD,CAA7B;AAyCA,OAAO,MAAMK,WAAW,GAAGxB,SAAS,CAACyB,OAA9B;AAEP,eAAezB,SAAf,C,CAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    total:0,\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n      state.totalQuantity++;\n      state.total=statuys + newItem.price;\n    //   console.log(state.items);\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    },\n  },\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n\n// import { createSlice } from \"@reduxjs/toolkit\";\n\n\n// const cartSlice = createSlice({\n//   name: \"cart\",\n//   initialstate: {\n//     item: [],\n//     totalquantity: 0,\n//   },\n//   reducers: {\n//     addItemToCard(state, action) {\n//       const newItem = action.payload;\n//       const existing = state.item.find((item) => item.id === newItem.id);\n//       state.totalquantity++;\n//       if (!existing) {\n//         state.item.push({\n//           id: newItem.id,\n//           price: newItem.price,\n//           quantity: 1,\n//           totalPrice: newItem.price,\n//           name: newItem.title,\n//         });\n//       } else {\n//         existing.quantity++;\n//         existing.totalprice = existing.totalPrice + newItem.price;\n//       }\n//     },\n//   removeItemFromCart(state, action) {\n//     const id = action.payload;\n//     const existing = state.item.find(item => item.id === id);\n//     state.totalquantity--;\n//     if (existing.quantity === 1) {\n//       state.item = state.item.filter(item => item.id !== id);\n//     } else {\n//       existing.quantity--;\n//     }\n//   },\n// }});\n\n// export const cartActions = cartSlice.actions;\n\n// export default cartSlice;\n"]},"metadata":{},"sourceType":"module"}